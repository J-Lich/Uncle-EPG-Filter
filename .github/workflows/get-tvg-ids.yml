name: M3U8 TVG-ID Extractor

on:
  workflow_dispatch:
    inputs:
      m3u8_url:
        description: 'URL to M3U8 playlist file'
        required: true
        type: string

jobs:
  extract-tvg-ids:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Extract TVG IDs from M3U8
        id: extract
        run: |
          python << 'EOF'
          import requests
          import re
          import time
          import os
          from urllib.parse import urlparse

          # Record start time
          start_time = time.time()

          # Get the M3U8 URL from input
          m3u8_url = "${{ github.event.inputs.m3u8_url }}"
          print(f"Processing M3U8 URL: {m3u8_url}")

          try:
              # Download the M3U8 file
              response = requests.get(m3u8_url, timeout=30)
              response.raise_for_status()

              content = response.text
              print(f"Downloaded M3U8 file successfully ({len(content)} characters)")

              # Extract TVG IDs using regex
              # Look for tvg-id="..." patterns in EXTINF lines
              tvg_id_pattern = r'tvg-id="([^"]+)"'
              tvg_ids = re.findall(tvg_id_pattern, content)

              # Remove duplicates while preserving order
              unique_tvg_ids = list(dict.fromkeys(tvg_ids))

              # Filter out empty TVG IDs
              filtered_tvg_ids = [tvg_id for tvg_id in unique_tvg_ids if tvg_id.strip()]

              print(f"Found {len(filtered_tvg_ids)} unique TVG IDs")

              # Write TVG IDs to file
              output_file = "custom-channels-tvg-ids.txt"
              with open(output_file, 'w', encoding='utf-8') as f:
                  for tvg_id in filtered_tvg_ids:
                      f.write(f"{tvg_id}\n")

              # Calculate execution time
              end_time = time.time()
              execution_time = round(end_time - start_time, 2)

              # Set outputs for GitHub Actions
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"channel_count={len(filtered_tvg_ids)}\n")
                  f.write(f"execution_time={execution_time}\n")
                  f.write(f"m3u8_url={m3u8_url}\n")

              print(f"Execution completed in {execution_time} seconds")
              print(f"TVG IDs saved to {output_file}")

          except requests.exceptions.RequestException as e:
              print(f"Error downloading M3U8 file: {e}")
              exit(1)
          except Exception as e:
              print(f"Error processing M3U8 file: {e}")
              exit(1)
          EOF

      - name: Display extraction summary
        run: |
          echo "=== M3U8 TVG-ID Extraction Summary ==="
          echo "Input M3U8 URL: ${{ steps.extract.outputs.m3u8_url }}"
          echo "Number of channels found: ${{ steps.extract.outputs.channel_count }}"
          echo "Execution time: ${{ steps.extract.outputs.execution_time }} seconds"
          echo "Output file: custom-channels-tvg-ids.txt"
          echo ""
          echo "First 10 TVG IDs:"
          head -10 custom-channels-tvg-ids.txt || echo "No TVG IDs found"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Check for changes
        id: check_changes
        run: |
          git add custom-channels-tvg-ids.txt
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected, will commit"
          fi
          
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git commit -m "Update custom-channels-tvg-ids.txt - ${{ steps.extract.outputs.channel_count }} channels from M3U8"
          git push
          echo "Changes committed and pushed successfully"
  
      - name: Create job summary
        run: |
          echo "## ðŸ“º M3U8 TVG-ID Extraction Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Input M3U8 URL** | \`${{ steps.extract.outputs.m3u8_url }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Channels Found** | ${{ steps.extract.outputs.channel_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Execution Time** | ${{ steps.extract.outputs.execution_time }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| **Output File** | \`custom-channels-tvg-ids.txt\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Sample TVG IDs:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -10 custom-channels-tvg-ids.txt >> $GITHUB_STEP_SUMMARY || echo "No TVG IDs found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY